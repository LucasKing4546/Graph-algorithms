from graph import Graph

if __name__ == "__main__":
    g = Graph.create_from_file("A2_3.txt")
    g.add_edge(('B', 'A'))
    #g.remove_edge(('2', '1'))
    try:
        print(g.get_vertices())
        print(g.get_v())
        print(g.get_e())
        print(g.is_edge('1', '3'))
        print(g.is_edge('2', '1'))
        i = g.neighbors('4')
        print(i.getCurrentPosition())
        j = g.inbound_neighbours('2')
        print(j.getCurrentPosition())
        j.next()
        print(j.getCurrentPosition())

    except Exception as e:
        print(e)
    print(g)
    print()
    g.change_if_directed()
    print(g)
    g.change_if_weighted()
    print(g)
    g.set_weight(('A', 'B'), 4)
    g.get_weight(('A', 'B'))
    bfs = g.BFS_iter('A')
    print(bfs.__next__())
    print(bfs.__next__())
    print(bfs.__next__())
    print(bfs.__next__())
    print(bfs.__next__())
    print(bfs.__next__())
    print(bfs.__next__())
    print(bfs.__next__())
    print(bfs.get_path_length())
    dfs = g.DFS_iter('B')
    print(dfs.__next__())
    print(dfs.__next__())
    print(dfs.__next__())
    print(dfs.__next__())
    print(dfs.__next__())
    print(dfs.__next__())
    print(dfs.__next__())
    print(dfs.__next__())
    print(dfs.get_path_length())


